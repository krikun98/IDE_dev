//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PascalParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PascalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Comment=1, Identifier=2, Number=3, CharacterString=4, Symbol=5, Whitespace=6, 
		SEMICOLON=7, LBRC=8, RBRC=9, DOT=10, EQL=11, Error=12, Nil=13, Begin=14, 
		End=15, Goto=16, Not=17, Signum=18, Case=19, Of=20, Else=21, Otherwise=22, 
		If=23, Then=24, For=25, To=26, Downto=27, Do=28, Repeat=29, Until=30, 
		While=31, With=32, Comparison=33, In=34, Is=35, Addition=36, Or=37, Xor=38, 
		COLON=39, LBKT=40, RBKT=41, COMMA=42, DOTS=43, AT=44, ASSIGN=45, PLUSASSIGN=46, 
		MINUSASSIGN=47, MULTASSIGN=48, DIVASSIGN=49, Multiplication=50, Div=51, 
		Mod=52, And=53, Shl=54, Shr=55, As=56;
	public const int
		RULE_program = 0, RULE_compoundStatement = 1, RULE_statement = 2, RULE_body = 3, 
		RULE_simpleStatement = 4, RULE_assigmnentStatement = 5, RULE_assignment = 6, 
		RULE_procedureStatement = 7, RULE_gotoStatement = 8, RULE_label = 9, RULE_structuredStatement = 10, 
		RULE_conditionalStatement = 11, RULE_repetitiveStatement = 12, RULE_caseStatement = 13, 
		RULE_case = 14, RULE_caseRange = 15, RULE_constant = 16, RULE_elsePart = 17, 
		RULE_ifStatement = 18, RULE_forStatement = 19, RULE_repeatStatement = 20, 
		RULE_whileStatement = 21, RULE_withStatement = 22, RULE_expression = 23, 
		RULE_simpleExpression = 24, RULE_term = 25, RULE_factor = 26, RULE_functionCall = 27, 
		RULE_actualParameterList = 28, RULE_unsignedConstant = 29, RULE_setConstructor = 30, 
		RULE_setGroup = 31, RULE_valueTypecast = 32, RULE_addressFactor = 33;
	public static readonly string[] ruleNames = {
		"program", "compoundStatement", "statement", "body", "simpleStatement", 
		"assigmnentStatement", "assignment", "procedureStatement", "gotoStatement", 
		"label", "structuredStatement", "conditionalStatement", "repetitiveStatement", 
		"caseStatement", "case", "caseRange", "constant", "elsePart", "ifStatement", 
		"forStatement", "repeatStatement", "whileStatement", "withStatement", 
		"expression", "simpleExpression", "term", "factor", "functionCall", "actualParameterList", 
		"unsignedConstant", "setConstructor", "setGroup", "valueTypecast", "addressFactor"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "';'", "'('", "')'", "'.'", 
		"'='", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "':'", "'['", "']'", "','", "'..'", "'@'", "':='", 
		"'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Comment", "Identifier", "Number", "CharacterString", "Symbol", 
		"Whitespace", "SEMICOLON", "LBRC", "RBRC", "DOT", "EQL", "Error", "Nil", 
		"Begin", "End", "Goto", "Not", "Signum", "Case", "Of", "Else", "Otherwise", 
		"If", "Then", "For", "To", "Downto", "Do", "Repeat", "Until", "While", 
		"With", "Comparison", "In", "Is", "Addition", "Or", "Xor", "COLON", "LBKT", 
		"RBKT", "COMMA", "DOTS", "AT", "ASSIGN", "PLUSASSIGN", "MINUSASSIGN", 
		"MULTASSIGN", "DIVASSIGN", "Multiplication", "Div", "Mod", "And", "Shl", 
		"Shr", "As"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PascalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PascalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PascalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PascalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PascalParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			compoundStatement();
			State = 69;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(PascalParser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(PascalParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_compoundStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(Begin);
			State = 72;
			statement();
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73;
					Match(SEMICOLON);
					State = 74;
					statement();
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 80;
				Match(SEMICOLON);
				}
			}

			State = 83;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredStatementContext structuredStatement() {
			return GetRuleContext<StructuredStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PascalParser.COLON, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 85;
				label();
				State = 86;
				Match(COLON);
				}
				break;
			}
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Goto:
				{
				State = 90;
				simpleStatement();
				}
				break;
			case Begin:
			case Case:
			case If:
			case For:
			case Repeat:
			case While:
			case With:
				{
				State = 91;
				structuredStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PascalParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 94;
				statement();
				State = 96;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 95;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 98;
				compoundStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssigmnentStatementContext assigmnentStatement() {
			return GetRuleContext<AssigmnentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStatementContext procedureStatement() {
			return GetRuleContext<ProcedureStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleStatement);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				assigmnentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				procedureStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103;
				gotoStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssigmnentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssigmnentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assigmnentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssigmnentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssigmnentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssigmnentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssigmnentStatementContext assigmnentStatement() {
		AssigmnentStatementContext _localctx = new AssigmnentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assigmnentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(Identifier);
			State = 107;
			assignment();
			State = 108;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PascalParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(PascalParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(PascalParser.MINUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(PascalParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(PascalParser.DIVASSIGN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUSASSIGN) | (1L << MINUSASSIGN) | (1L << MULTASSIGN) | (1L << DIVASSIGN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_procedureStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(Identifier);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRC) {
				{
				State = 113;
				actualParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(PascalParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(Goto);
			State = 117;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(PascalParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 18, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = TokenStream.LA(1);
			if ( !(_la==Identifier || _la==Number) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetitiveStatementContext repetitiveStatement() {
			return GetRuleContext<RepetitiveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public StructuredStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredStatementContext structuredStatement() {
		StructuredStatementContext _localctx = new StructuredStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_structuredStatement);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Begin:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				compoundStatement();
				}
				break;
			case Case:
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				conditionalStatement();
				}
				break;
			case For:
			case Repeat:
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				repetitiveStatement();
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				withStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_conditionalStatement);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				caseStatement();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitiveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public RepetitiveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetitiveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetitiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetitiveStatementContext repetitiveStatement() {
		RepetitiveStatementContext _localctx = new RepetitiveStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_repetitiveStatement);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case For:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				forStatement();
				}
				break;
			case Repeat:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				repeatStatement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				whileStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(PascalParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(PascalParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(PascalParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsePartContext elsePart() {
			return GetRuleContext<ElsePartContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(Case);
			State = 137;
			expression();
			State = 138;
			Match(Of);
			State = 139;
			@case();
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 140;
					Match(SEMICOLON);
					State = 141;
					@case();
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else || _la==Otherwise) {
				{
				State = 147;
				elsePart();
				}
			}

			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 150;
				Match(SEMICOLON);
				}
			}

			State = 153;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseRangeContext[] caseRange() {
			return GetRuleContexts<CaseRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseRangeContext caseRange(int i) {
			return GetRuleContext<CaseRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 28, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			caseRange();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 156;
				Match(COMMA);
				State = 157;
				caseRange();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 163;
			Match(COLON);
			State = 164;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(PascalParser.DOTS, 0); }
		public CaseRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseRangeContext caseRange() {
		CaseRangeContext _localctx = new CaseRangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_caseRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			constant();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTS) {
				{
				State = 167;
				Match(DOTS);
				State = 168;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(PascalParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 32, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==CharacterString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsePartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PascalParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Otherwise() { return GetToken(PascalParser.Otherwise, 0); }
		public ElsePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsePartContext elsePart() {
		ElsePartContext _localctx = new ElsePartContext(Context, State);
		EnterRule(_localctx, 34, RULE_elsePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.LA(1);
			if ( !(_la==Else || _la==Otherwise) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 174;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(PascalParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(PascalParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PascalParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(If);
			State = 177;
			expression();
			State = 178;
			Match(Then);
			State = 179;
			body();
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 180;
				Match(Else);
				State = 181;
				body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PascalParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PascalParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(PascalParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Downto() { return GetToken(PascalParser.Downto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(PascalParser.In, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_forStatement);
		int _la;
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				Match(For);
				State = 185;
				Match(Identifier);
				State = 186;
				Match(ASSIGN);
				State = 187;
				expression();
				State = 188;
				_la = TokenStream.LA(1);
				if ( !(_la==To || _la==Downto) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 189;
				expression();
				State = 190;
				Match(Do);
				State = 191;
				body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				Match(For);
				State = 194;
				Match(Identifier);
				State = 195;
				Match(In);
				State = 196;
				expression();
				State = 197;
				Match(Do);
				State = 198;
				body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(PascalParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(PascalParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_repeatStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(Repeat);
			State = 203;
			statement();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 204;
				Match(SEMICOLON);
				State = 205;
				statement();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211;
			Match(Until);
			State = 212;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(PascalParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(While);
			State = 215;
			expression();
			State = 216;
			Match(Do);
			State = 217;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(PascalParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(PascalParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(PascalParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_withStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(With);
			State = 220;
			Match(Identifier);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 221;
				Match(COMMA);
				State = 222;
				Match(Identifier);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228;
			Match(Do);
			State = 229;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comparison() { return GetToken(PascalParser.Comparison, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			simpleExpression();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comparison) {
				{
				State = 232;
				Match(Comparison);
				State = 233;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Addition() { return GetTokens(PascalParser.Addition); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Addition(int i) {
			return GetToken(PascalParser.Addition, i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			term();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Addition) {
				{
				{
				State = 237;
				Match(Addition);
				State = 238;
				term();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Multiplication() { return GetTokens(PascalParser.Multiplication); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiplication(int i) {
			return GetToken(PascalParser.Multiplication, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 50, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			factor();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Multiplication) {
				{
				{
				State = 245;
				Match(Multiplication);
				State = 246;
				factor();
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(PascalParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(PascalParser.RBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedConstantContext unsignedConstant() {
			return GetRuleContext<UnsignedConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(PascalParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signum() { return GetToken(PascalParser.Signum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetConstructorContext setConstructor() {
			return GetRuleContext<SetConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueTypecastContext valueTypecast() {
			return GetRuleContext<ValueTypecastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddressFactorContext addressFactor() {
			return GetRuleContext<AddressFactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 52, RULE_factor);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				Match(LBRC);
				State = 253;
				expression();
				State = 254;
				Match(RBRC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258;
				unsignedConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 259;
				Match(Not);
				State = 260;
				factor();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 261;
				Match(Signum);
				State = 262;
				factor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 263;
				setConstructor();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 264;
				valueTypecast();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 265;
				addressFactor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(Identifier);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRC) {
				{
				State = 269;
				actualParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(PascalParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(PascalParser.RBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(Context, State);
		EnterRule(_localctx, 56, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(LBRC);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Identifier) | (1L << Number) | (1L << CharacterString) | (1L << LBRC) | (1L << Nil) | (1L << Not) | (1L << Signum) | (1L << RBKT) | (1L << AT))) != 0)) {
				{
				State = 273;
				expression();
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 274;
					Match(COMMA);
					State = 275;
					expression();
					}
					}
					State = 280;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 283;
			Match(RBRC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(PascalParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nil() { return GetToken(PascalParser.Nil, 0); }
		public UnsignedConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedConstantContext unsignedConstant() {
		UnsignedConstantContext _localctx = new UnsignedConstantContext(Context, State);
		EnterRule(_localctx, 58, RULE_unsignedConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << CharacterString) | (1L << Nil))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBKT() { return GetTokens(PascalParser.RBKT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBKT(int i) {
			return GetToken(PascalParser.RBKT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetGroupContext[] setGroup() {
			return GetRuleContexts<SetGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetGroupContext setGroup(int i) {
			return GetRuleContext<SetGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public SetConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetConstructorContext setConstructor() {
		SetConstructorContext _localctx = new SetConstructorContext(Context, State);
		EnterRule(_localctx, 60, RULE_setConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(RBKT);
			State = 288;
			setGroup();
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 289;
				Match(COMMA);
				State = 290;
				setGroup();
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 296;
			Match(RBKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(PascalParser.DOTS, 0); }
		public SetGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSetGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSetGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetGroupContext setGroup() {
		SetGroupContext _localctx = new SetGroupContext(Context, State);
		EnterRule(_localctx, 62, RULE_setGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			expression();
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTS) {
				{
				State = 299;
				Match(DOTS);
				State = 300;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypecastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(PascalParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(PascalParser.RBRC, 0); }
		public ValueTypecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypecast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypecast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypecastContext valueTypecast() {
		ValueTypecastContext _localctx = new ValueTypecastContext(Context, State);
		EnterRule(_localctx, 64, RULE_valueTypecast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(Identifier);
			State = 304;
			Match(LBRC);
			State = 305;
			expression();
			State = 306;
			Match(RBRC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddressFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PascalParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		public AddressFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAddressFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAddressFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddressFactorContext addressFactor() {
		AddressFactorContext _localctx = new AddressFactorContext(Context, State);
		EnterRule(_localctx, 66, RULE_addressFactor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(AT);
			State = 309;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ':', '\x13A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'N', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', 'Q', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'T', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '[', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '_', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x63', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x66', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'k', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'u', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x80', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\x84', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x89', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x91', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x94', '\v', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x97', '\n', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x9A', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xA1', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\xA4', '\v', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xAC', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xB9', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\xCB', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xD1', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\xD4', '\v', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\xE2', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\xE5', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xED', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\xF2', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\xF5', '\v', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\xFA', '\n', '\x1B', 
		'\f', '\x1B', '\xE', '\x1B', '\xFD', '\v', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x10D', '\n', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x111', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x117', 
		'\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x11A', '\v', '\x1E', '\x5', 
		'\x1E', '\x11C', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', 
		'\x126', '\n', ' ', '\f', ' ', '\xE', ' ', '\x129', '\v', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x130', 
		'\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x2', '\x2', '$', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x2', '\b', '\x3', '\x2', '/', '\x33', '\x3', '\x2', 
		'\x4', '\x5', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '\x17', '\x18', 
		'\x3', '\x2', '\x1C', '\x1D', '\x4', '\x2', '\x5', '\x6', '\xF', '\xF', 
		'\x2', '\x13F', '\x2', '\x46', '\x3', '\x2', '\x2', '\x2', '\x4', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'Z', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\n', 'j', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'l', '\x3', '\x2', '\x2', '\x2', '\xE', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'r', '\x3', '\x2', '\x2', '\x2', '\x12', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'y', '\x3', '\x2', '\x2', '\x2', '\x16', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x9D', '\x3', '\x2', '\x2', '\x2', ' ', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xAF', '\x3', '\x2', '\x2', '\x2', '&', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xCA', '\x3', '\x2', '\x2', '\x2', '*', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xD8', '\x3', '\x2', '\x2', '\x2', '.', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\x34', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x38', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x112', '\x3', '\x2', '\x2', '\x2', '<', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x42', '\x131', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x136', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x5', '\x4', '\x3', '\x2', 'G', 'H', '\a', '\x2', '\x2', '\x3', 'H', 
		'\x3', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x10', '\x2', '\x2', 
		'J', 'O', '\x5', '\x6', '\x4', '\x2', 'K', 'L', '\a', '\t', '\x2', '\x2', 
		'L', 'N', '\x5', '\x6', '\x4', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\a', '\t', '\x2', '\x2', 
		'S', 'R', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x11', '\x2', '\x2', 
		'V', '\x5', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x5', '\x14', '\v', 
		'\x2', 'X', 'Y', '\a', ')', '\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x5', '\n', '\x6', 
		'\x2', ']', '_', '\x5', '\x16', '\f', '\x2', '^', '\\', '\x3', '\x2', 
		'\x2', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\a', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x62', '\x5', '\x6', '\x4', '\x2', '\x61', 
		'\x63', '\a', '\t', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x66', '\x5', '\x4', '\x3', '\x2', '\x65', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\t', '\x3', '\x2', '\x2', '\x2', 'g', 'k', '\x5', '\f', 
		'\a', '\x2', 'h', 'k', '\x5', '\x10', '\t', '\x2', 'i', 'k', '\x5', '\x12', 
		'\n', '\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\a', '\x4', '\x2', '\x2', 'm', 'n', '\x5', 
		'\xE', '\b', '\x2', 'n', 'o', '\x5', '\x30', '\x19', '\x2', 'o', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\t', '\x2', '\x2', '\x2', 'q', 
		'\xF', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\a', '\x4', '\x2', '\x2', 
		's', 'u', '\x5', ':', '\x1E', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\a', '\x12', '\x2', '\x2', 'w', 'x', '\x5', '\x14', 
		'\v', '\x2', 'x', '\x13', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\t', 
		'\x3', '\x2', '\x2', 'z', '\x15', '\x3', '\x2', '\x2', '\x2', '{', '\x80', 
		'\x5', '\x4', '\x3', '\x2', '|', '\x80', '\x5', '\x18', '\r', '\x2', '}', 
		'\x80', '\x5', '\x1A', '\xE', '\x2', '~', '\x80', '\x5', '.', '\x18', 
		'\x2', '\x7F', '{', '\x3', '\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x17', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x84', '\x5', '\x1C', '\xF', '\x2', '\x82', '\x84', '\x5', '&', '\x14', 
		'\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x19', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x89', '\x5', '(', '\x15', '\x2', '\x86', '\x89', '\x5', '*', '\x16', 
		'\x2', '\x87', '\x89', '\x5', ',', '\x17', '\x2', '\x88', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '\x15', '\x2', '\x2', '\x8B', '\x8C', '\x5', 
		'\x30', '\x19', '\x2', '\x8C', '\x8D', '\a', '\x16', '\x2', '\x2', '\x8D', 
		'\x92', '\x5', '\x1E', '\x10', '\x2', '\x8E', '\x8F', '\a', '\t', '\x2', 
		'\x2', '\x8F', '\x91', '\x5', '\x1E', '\x10', '\x2', '\x90', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x96', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x97', '\x5', '$', '\x13', '\x2', '\x96', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x99', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\a', 
		'\t', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', '\x11', '\x2', '\x2', '\x9C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\xA2', '\x5', ' ', '\x11', '\x2', '\x9E', 
		'\x9F', '\a', ',', '\x2', '\x2', '\x9F', '\xA1', '\x5', ' ', '\x11', '\x2', 
		'\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', ')', 
		'\x2', '\x2', '\xA6', '\xA7', '\x5', '\b', '\x5', '\x2', '\xA7', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', '\x5', '\"', '\x12', '\x2', 
		'\xA9', '\xAA', '\a', '-', '\x2', '\x2', '\xAA', '\xAC', '\x5', '\"', 
		'\x12', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '!', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\t', '\x4', '\x2', '\x2', '\xAE', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB0', '\t', '\x5', '\x2', '\x2', '\xB0', '\xB1', '\x5', '\b', 
		'\x5', '\x2', '\xB1', '%', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', 
		'\a', '\x19', '\x2', '\x2', '\xB3', '\xB4', '\x5', '\x30', '\x19', '\x2', 
		'\xB4', '\xB5', '\a', '\x1A', '\x2', '\x2', '\xB5', '\xB8', '\x5', '\b', 
		'\x5', '\x2', '\xB6', '\xB7', '\a', '\x17', '\x2', '\x2', '\xB7', '\xB9', 
		'\x5', '\b', '\x5', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xBB', '\a', '\x1B', '\x2', '\x2', '\xBB', '\xBC', 
		'\a', '\x4', '\x2', '\x2', '\xBC', '\xBD', '\a', '/', '\x2', '\x2', '\xBD', 
		'\xBE', '\x5', '\x30', '\x19', '\x2', '\xBE', '\xBF', '\t', '\x6', '\x2', 
		'\x2', '\xBF', '\xC0', '\x5', '\x30', '\x19', '\x2', '\xC0', '\xC1', '\a', 
		'\x1E', '\x2', '\x2', '\xC1', '\xC2', '\x5', '\b', '\x5', '\x2', '\xC2', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x1B', '\x2', 
		'\x2', '\xC4', '\xC5', '\a', '\x4', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		'$', '\x2', '\x2', '\xC6', '\xC7', '\x5', '\x30', '\x19', '\x2', '\xC7', 
		'\xC8', '\a', '\x1E', '\x2', '\x2', '\xC8', '\xC9', '\x5', '\b', '\x5', 
		'\x2', '\xC9', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		')', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x1F', '\x2', 
		'\x2', '\xCD', '\xD2', '\x5', '\x6', '\x4', '\x2', '\xCE', '\xCF', '\a', 
		'\t', '\x2', '\x2', '\xCF', '\xD1', '\x5', '\x6', '\x4', '\x2', '\xD0', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', ' ', '\x2', 
		'\x2', '\xD6', '\xD7', '\x5', '\x30', '\x19', '\x2', '\xD7', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '!', '\x2', '\x2', '\xD9', 
		'\xDA', '\x5', '\x30', '\x19', '\x2', '\xDA', '\xDB', '\a', '\x1E', '\x2', 
		'\x2', '\xDB', '\xDC', '\x5', '\b', '\x5', '\x2', '\xDC', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\"', '\x2', '\x2', '\xDE', 
		'\xE3', '\a', '\x4', '\x2', '\x2', '\xDF', '\xE0', '\a', ',', '\x2', '\x2', 
		'\xE0', '\xE2', '\a', '\x4', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE7', '\a', '\x1E', '\x2', '\x2', '\xE7', '\xE8', 
		'\x5', '\b', '\x5', '\x2', '\xE8', '/', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEC', '\x5', '\x32', '\x1A', '\x2', '\xEA', '\xEB', '\a', '#', '\x2', 
		'\x2', '\xEB', '\xED', '\x5', '\x32', '\x1A', '\x2', '\xEC', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF3', '\x5', '\x34', '\x1B', 
		'\x2', '\xEF', '\xF0', '\a', '&', '\x2', '\x2', '\xF0', '\xF2', '\x5', 
		'\x34', '\x1B', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xFB', '\x5', '\x36', '\x1C', '\x2', '\xF7', '\xF8', '\a', '\x34', '\x2', 
		'\x2', '\xF8', '\xFA', '\x5', '\x36', '\x1C', '\x2', '\xF9', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\x35', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\n', '\x2', '\x2', '\xFF', 
		'\x100', '\x5', '\x30', '\x19', '\x2', '\x100', '\x101', '\a', '\v', '\x2', 
		'\x2', '\x101', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x102', '\x10D', 
		'\a', '\x4', '\x2', '\x2', '\x103', '\x10D', '\x5', '\x38', '\x1D', '\x2', 
		'\x104', '\x10D', '\x5', '<', '\x1F', '\x2', '\x105', '\x106', '\a', '\x13', 
		'\x2', '\x2', '\x106', '\x10D', '\x5', '\x36', '\x1C', '\x2', '\x107', 
		'\x108', '\a', '\x14', '\x2', '\x2', '\x108', '\x10D', '\x5', '\x36', 
		'\x1C', '\x2', '\x109', '\x10D', '\x5', '>', ' ', '\x2', '\x10A', '\x10D', 
		'\x5', '\x42', '\"', '\x2', '\x10B', '\x10D', '\x5', '\x44', '#', '\x2', 
		'\x10C', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x103', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x110', '\a', '\x4', '\x2', '\x2', '\x10F', 
		'\x111', '\x5', ':', '\x1E', '\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x11B', '\a', '\n', '\x2', '\x2', 
		'\x113', '\x118', '\x5', '\x30', '\x19', '\x2', '\x114', '\x115', '\a', 
		',', '\x2', '\x2', '\x115', '\x117', '\x5', '\x30', '\x19', '\x2', '\x116', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x117', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\v', '\x2', 
		'\x2', '\x11E', ';', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\t', 
		'\a', '\x2', '\x2', '\x120', '=', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x122', '\a', '+', '\x2', '\x2', '\x122', '\x127', '\x5', '@', '!', '\x2', 
		'\x123', '\x124', '\a', ',', '\x2', '\x2', '\x124', '\x126', '\x5', '@', 
		'!', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\a', '+', '\x2', '\x2', '\x12B', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12F', '\x5', '\x30', '\x19', '\x2', '\x12D', '\x12E', '\a', 
		'-', '\x2', '\x2', '\x12E', '\x130', '\x5', '\x30', '\x19', '\x2', '\x12F', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x41', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', 
		'\a', '\x4', '\x2', '\x2', '\x132', '\x133', '\a', '\n', '\x2', '\x2', 
		'\x133', '\x134', '\x5', '\x30', '\x19', '\x2', '\x134', '\x135', '\a', 
		'\v', '\x2', '\x2', '\x135', '\x43', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x137', '\a', '.', '\x2', '\x2', '\x137', '\x138', '\a', '\x4', '\x2', 
		'\x2', '\x138', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1F', 'O', 'S', 
		'Z', '^', '\x62', '\x65', 'j', 't', '\x7F', '\x83', '\x88', '\x92', '\x96', 
		'\x99', '\xA2', '\xAB', '\xB8', '\xCA', '\xD2', '\xE3', '\xEC', '\xF3', 
		'\xFB', '\x10C', '\x110', '\x118', '\x11B', '\x127', '\x12F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
