//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PascalParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IPascalParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class PascalParserBaseListener : IPascalParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] PascalParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] PascalParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] PascalParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] PascalParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.label"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabel([NotNull] PascalParser.LabelContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.label"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabel([NotNull] PascalParser.LabelContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] PascalParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] PascalParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unlabelledStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnlabelledStatement([NotNull] PascalParser.UnlabelledStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unlabelledStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnlabelledStatement([NotNull] PascalParser.UnlabelledStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.simpleStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleStatement([NotNull] PascalParser.SimpleStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.simpleStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleStatement([NotNull] PascalParser.SimpleStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.assignmentStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentStatement([NotNull] PascalParser.AssignmentStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.assignmentStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentStatement([NotNull] PascalParser.AssignmentStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] PascalParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] PascalParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] PascalParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] PascalParser.VariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] PascalParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] PascalParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.simpleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleExpression([NotNull] PascalParser.SimpleExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.simpleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleExpression([NotNull] PascalParser.SimpleExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] PascalParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] PascalParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] PascalParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] PascalParser.FactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.setConstructor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetConstructor([NotNull] PascalParser.SetConstructorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.setConstructor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetConstructor([NotNull] PascalParser.SetConstructorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElement([NotNull] PascalParser.ElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElement([NotNull] PascalParser.ElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.procedureStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProcedureStatement([NotNull] PascalParser.ProcedureStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.procedureStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProcedureStatement([NotNull] PascalParser.ProcedureStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] PascalParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] PascalParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.actualParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterActualParameterList([NotNull] PascalParser.ActualParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.actualParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitActualParameterList([NotNull] PascalParser.ActualParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.gotoStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGotoStatement([NotNull] PascalParser.GotoStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.gotoStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGotoStatement([NotNull] PascalParser.GotoStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.emptyStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatement([NotNull] PascalParser.EmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.emptyStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatement([NotNull] PascalParser.EmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.structuredStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructuredStatement([NotNull] PascalParser.StructuredStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.structuredStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructuredStatement([NotNull] PascalParser.StructuredStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.compoundStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompoundStatement([NotNull] PascalParser.CompoundStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.compoundStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompoundStatement([NotNull] PascalParser.CompoundStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.statements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatements([NotNull] PascalParser.StatementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.statements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatements([NotNull] PascalParser.StatementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.conditionalStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionalStatement([NotNull] PascalParser.ConditionalStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.conditionalStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionalStatement([NotNull] PascalParser.ConditionalStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] PascalParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] PascalParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.caseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseStatement([NotNull] PascalParser.CaseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.caseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseStatement([NotNull] PascalParser.CaseStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.case"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCase([NotNull] PascalParser.CaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.case"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCase([NotNull] PascalParser.CaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.caseRange"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseRange([NotNull] PascalParser.CaseRangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.caseRange"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseRange([NotNull] PascalParser.CaseRangeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] PascalParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] PascalParser.ConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.elsePart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElsePart([NotNull] PascalParser.ElsePartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.elsePart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElsePart([NotNull] PascalParser.ElsePartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.repetitiveStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepetitiveStatement([NotNull] PascalParser.RepetitiveStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.repetitiveStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepetitiveStatement([NotNull] PascalParser.RepetitiveStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] PascalParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] PascalParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] PascalParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] PascalParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.repeatStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRepeatStatement([NotNull] PascalParser.RepeatStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.repeatStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRepeatStatement([NotNull] PascalParser.RepeatStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.withStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithStatement([NotNull] PascalParser.WithStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.withStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithStatement([NotNull] PascalParser.WithStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unsignedConstant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnsignedConstant([NotNull] PascalParser.UnsignedConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unsignedConstant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnsignedConstant([NotNull] PascalParser.UnsignedConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.valueTypecast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterValueTypecast([NotNull] PascalParser.ValueTypecastContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.valueTypecast"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitValueTypecast([NotNull] PascalParser.ValueTypecastContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
