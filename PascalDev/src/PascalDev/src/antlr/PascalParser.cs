//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PascalParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PascalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Number=1, UnsignedInteger=2, CharacterString=3, Comment=4, SEMICOLON=5, 
		LBRC=6, RBRC=7, COLON=8, LBKT=9, RBKT=10, LBKT2=11, RBKT2=12, COMMA=13, 
		DOTS=14, AT=15, DOT=16, POINTER=17, ASSIGN=18, PLUSASSIGN=19, MINUSASSIGN=20, 
		MULTASSIGN=21, DIVASSIGN=22, Comparison=23, In=24, Is=25, Addition=26, 
		Or=27, Xor=28, Multiplication=29, Div=30, Mod=31, And=32, Shl=33, Shr=34, 
		As=35, Nil=36, Begin=37, End=38, Goto=39, Not=40, Signum=41, Case=42, 
		Of=43, Else=44, Otherwise=45, If=46, Then=47, For=48, To=49, Downto=50, 
		Do=51, Repeat=52, Until=53, While=54, With=55, Identifier=56, Symbol=57, 
		Whitespace=58, Error=59;
	public const int
		RULE_program = 0, RULE_identifier = 1, RULE_label = 2, RULE_statement = 3, 
		RULE_unlabelledStatement = 4, RULE_simpleStatement = 5, RULE_assignmentStatement = 6, 
		RULE_assignment = 7, RULE_variable = 8, RULE_expression = 9, RULE_simpleExpression = 10, 
		RULE_term = 11, RULE_factor = 12, RULE_setConstructor = 13, RULE_element = 14, 
		RULE_procedureStatement = 15, RULE_functionCall = 16, RULE_actualParameterList = 17, 
		RULE_gotoStatement = 18, RULE_emptyStatement = 19, RULE_structuredStatement = 20, 
		RULE_compoundStatement = 21, RULE_statements = 22, RULE_conditionalStatement = 23, 
		RULE_ifStatement = 24, RULE_caseStatement = 25, RULE_case = 26, RULE_caseRange = 27, 
		RULE_constant = 28, RULE_elsePart = 29, RULE_repetitiveStatement = 30, 
		RULE_whileStatement = 31, RULE_forStatement = 32, RULE_repeatStatement = 33, 
		RULE_withStatement = 34, RULE_unsignedConstant = 35, RULE_valueTypecast = 36;
	public static readonly string[] ruleNames = {
		"program", "identifier", "label", "statement", "unlabelledStatement", 
		"simpleStatement", "assignmentStatement", "assignment", "variable", "expression", 
		"simpleExpression", "term", "factor", "setConstructor", "element", "procedureStatement", 
		"functionCall", "actualParameterList", "gotoStatement", "emptyStatement", 
		"structuredStatement", "compoundStatement", "statements", "conditionalStatement", 
		"ifStatement", "caseStatement", "case", "caseRange", "constant", "elsePart", 
		"repetitiveStatement", "whileStatement", "forStatement", "repeatStatement", 
		"withStatement", "unsignedConstant", "valueTypecast"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "';'", "'('", "')'", "':'", "'['", "']'", 
		"'(.'", "'.)'", "','", "'..'", "'@'", "'.'", "'^'", "':='", "'+='", "'-='", 
		"'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Number", "UnsignedInteger", "CharacterString", "Comment", "SEMICOLON", 
		"LBRC", "RBRC", "COLON", "LBKT", "RBKT", "LBKT2", "RBKT2", "COMMA", "DOTS", 
		"AT", "DOT", "POINTER", "ASSIGN", "PLUSASSIGN", "MINUSASSIGN", "MULTASSIGN", 
		"DIVASSIGN", "Comparison", "In", "Is", "Addition", "Or", "Xor", "Multiplication", 
		"Div", "Mod", "And", "Shl", "Shr", "As", "Nil", "Begin", "End", "Goto", 
		"Not", "Signum", "Case", "Of", "Else", "Otherwise", "If", "Then", "For", 
		"To", "Downto", "Do", "Repeat", "Until", "While", "With", "Identifier", 
		"Symbol", "Whitespace", "Error"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PascalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PascalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PascalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PascalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PascalParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			compoundStatement();
			State = 75;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PascalParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedInteger() { return GetToken(PascalParser.UnsignedInteger, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(UnsignedInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnlabelledStatementContext unlabelledStatement() {
			return GetRuleContext<UnlabelledStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UnsignedInteger:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				label();
				State = 82;
				Match(COLON);
				State = 83;
				unlabelledStatement();
				}
				break;
			case SEMICOLON:
			case AT:
			case Begin:
			case End:
			case Goto:
			case Case:
			case Else:
			case If:
			case For:
			case Repeat:
			case Until:
			case While:
			case With:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				unlabelledStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredStatementContext structuredStatement() {
			return GetRuleContext<StructuredStatementContext>(0);
		}
		public UnlabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterUnlabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitUnlabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabelledStatementContext unlabelledStatement() {
		UnlabelledStatementContext _localctx = new UnlabelledStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_unlabelledStatement);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
			case AT:
			case End:
			case Goto:
			case Else:
			case Until:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				simpleStatement();
				}
				break;
			case Begin:
			case Case:
			case If:
			case For:
			case Repeat:
			case While:
			case With:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				structuredStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureStatementContext procedureStatement() {
			return GetRuleContext<ProcedureStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_simpleStatement);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				procedureStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				gotoStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 95;
				emptyStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			variable();
			State = 99;
			assignment();
			State = 100;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PascalParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSASSIGN() { return GetToken(PascalParser.PLUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSASSIGN() { return GetToken(PascalParser.MINUSASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTASSIGN() { return GetToken(PascalParser.MULTASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVASSIGN() { return GetToken(PascalParser.DIVASSIGN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << PLUSASSIGN) | (1L << MINUSASSIGN) | (1L << MULTASSIGN) | (1L << DIVASSIGN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PascalParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBKT() { return GetTokens(PascalParser.LBKT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBKT(int i) {
			return GetToken(PascalParser.LBKT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBKT() { return GetTokens(PascalParser.RBKT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBKT(int i) {
			return GetToken(PascalParser.RBKT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBKT2() { return GetTokens(PascalParser.LBKT2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBKT2(int i) {
			return GetToken(PascalParser.LBKT2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PascalParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PascalParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POINTER() { return GetTokens(PascalParser.POINTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER(int i) {
			return GetToken(PascalParser.POINTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				{
				State = 104;
				Match(AT);
				State = 105;
				identifier();
				}
				break;
			case Identifier:
				{
				State = 106;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 134;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LBKT:
						{
						State = 109;
						Match(LBKT);
						State = 110;
						expression();
						State = 115;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 111;
							Match(COMMA);
							State = 112;
							expression();
							}
							}
							State = 117;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 118;
						Match(RBKT);
						}
						break;
					case LBKT2:
						{
						State = 120;
						Match(LBKT2);
						State = 121;
						expression();
						State = 126;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 122;
							Match(COMMA);
							State = 123;
							expression();
							}
							}
							State = 128;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 129;
						Match(LBKT2);
						}
						break;
					case DOT:
						{
						State = 131;
						Match(DOT);
						State = 132;
						identifier();
						}
						break;
					case POINTER:
						{
						State = 133;
						Match(POINTER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comparison() { return GetToken(PascalParser.Comparison, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			simpleExpression();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comparison) {
				{
				State = 140;
				Match(Comparison);
				State = 141;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Addition() { return GetTokens(PascalParser.Addition); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Addition(int i) {
			return GetToken(PascalParser.Addition, i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			term();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Addition) {
				{
				{
				State = 145;
				Match(Addition);
				State = 146;
				term();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Multiplication() { return GetTokens(PascalParser.Multiplication); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiplication(int i) {
			return GetToken(PascalParser.Multiplication, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 22, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			factor();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Multiplication) {
				{
				{
				State = 153;
				Match(Multiplication);
				State = 154;
				factor();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(PascalParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(PascalParser.RBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedConstantContext unsignedConstant() {
			return GetRuleContext<UnsignedConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(PascalParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signum() { return GetToken(PascalParser.Signum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetConstructorContext setConstructor() {
			return GetRuleContext<SetConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueTypecastContext valueTypecast() {
			return GetRuleContext<ValueTypecastContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				Match(LBRC);
				State = 161;
				expression();
				State = 162;
				Match(RBRC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				unsignedConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				Match(Not);
				State = 168;
				factor();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 169;
				Match(Signum);
				State = 170;
				factor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 171;
				setConstructor();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 172;
				valueTypecast();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBKT() { return GetToken(PascalParser.LBKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBKT() { return GetToken(PascalParser.RBKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBKT2() { return GetToken(PascalParser.LBKT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBKT2() { return GetToken(PascalParser.RBKT2, 0); }
		public SetConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitSetConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetConstructorContext setConstructor() {
		SetConstructorContext _localctx = new SetConstructorContext(Context, State);
		EnterRule(_localctx, 26, RULE_setConstructor);
		int _la;
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(LBKT);
				State = 176;
				element();
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 177;
					Match(COMMA);
					State = 178;
					element();
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 184;
				Match(RBKT);
				}
				break;
			case LBKT2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				Match(LBKT2);
				State = 187;
				element();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 188;
					Match(COMMA);
					State = 189;
					element();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 195;
				Match(RBKT2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(PascalParser.DOTS, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 28, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			expression();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTS) {
				{
				State = 200;
				Match(DOTS);
				State = 201;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedureStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			identifier();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRC) {
				{
				State = 205;
				actualParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			identifier();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRC) {
				{
				State = 209;
				actualParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(PascalParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(PascalParser.RBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(LBRC);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << CharacterString) | (1L << LBRC) | (1L << LBKT) | (1L << LBKT2) | (1L << AT) | (1L << Nil) | (1L << Not) | (1L << Signum) | (1L << Identifier))) != 0)) {
				{
				State = 213;
				expression();
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 214;
					Match(COMMA);
					State = 215;
					expression();
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 223;
			Match(RBRC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(PascalParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(Goto);
			State = 226;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetitiveStatementContext repetitiveStatement() {
			return GetRuleContext<RepetitiveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public StructuredStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredStatementContext structuredStatement() {
		StructuredStatementContext _localctx = new StructuredStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_structuredStatement);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Begin:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				compoundStatement();
				}
				break;
			case Case:
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				conditionalStatement();
				}
				break;
			case For:
			case Repeat:
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 232;
				repetitiveStatement();
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 4);
				{
				State = 233;
				withStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Begin() { return GetToken(PascalParser.Begin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(PascalParser.End, 0); }
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_compoundStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(Begin);
			State = 237;
			statements();
			State = 238;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 44, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			statement();
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 241;
					Match(SEMICOLON);
					State = 242;
					statement();
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 248;
				Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_conditionalStatement);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				caseStatement();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(PascalParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(PascalParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PascalParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(If);
			State = 256;
			expression();
			State = 257;
			Match(Then);
			State = 258;
			statement();
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 259;
				Match(Else);
				State = 260;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(PascalParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Of() { return GetToken(PascalParser.Of, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(PascalParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(PascalParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(PascalParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsePartContext elsePart() {
			return GetRuleContext<ElsePartContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(Case);
			State = 264;
			expression();
			State = 265;
			Match(Of);
			State = 266;
			@case();
			State = 271;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 267;
					Match(SEMICOLON);
					State = 268;
					@case();
					}
					} 
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 274;
				elsePart();
				}
				break;
			}
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 277;
				Match(SEMICOLON);
				}
			}

			State = 280;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseRangeContext[] caseRange() {
			return GetRuleContexts<CaseRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseRangeContext caseRange(int i) {
			return GetRuleContext<CaseRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PascalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 52, RULE_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			caseRange();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 283;
				Match(COMMA);
				State = 284;
				caseRange();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 290;
			Match(COLON);
			State = 291;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(PascalParser.DOTS, 0); }
		public CaseRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitCaseRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseRangeContext caseRange() {
		CaseRangeContext _localctx = new CaseRangeContext(Context, State);
		EnterRule(_localctx, 54, RULE_caseRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			constant();
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTS) {
				{
				State = 294;
				Match(DOTS);
				State = 295;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(PascalParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 56, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==CharacterString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsePartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PascalParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(PascalParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Otherwise() { return GetToken(PascalParser.Otherwise, 0); }
		public ElsePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitElsePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsePartContext elsePart() {
		ElsePartContext _localctx = new ElsePartContext(Context, State);
		EnterRule(_localctx, 58, RULE_elsePart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(SEMICOLON);
			State = 301;
			_la = TokenStream.LA(1);
			if ( !(_la==Else || _la==Otherwise) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 302;
			statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetitiveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public RepetitiveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetitiveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepetitiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetitiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetitiveStatementContext repetitiveStatement() {
		RepetitiveStatementContext _localctx = new RepetitiveStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_repetitiveStatement);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case For:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				forStatement();
				}
				break;
			case Repeat:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				repeatStatement();
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 3);
				{
				State = 306;
				whileStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(PascalParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(While);
			State = 310;
			expression();
			State = 311;
			Match(Do);
			State = 312;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(PascalParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PascalParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(PascalParser.To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Downto() { return GetToken(PascalParser.Downto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(PascalParser.In, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_forStatement);
		int _la;
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				Match(For);
				State = 315;
				identifier();
				State = 316;
				Match(ASSIGN);
				State = 317;
				expression();
				State = 318;
				_la = TokenStream.LA(1);
				if ( !(_la==To || _la==Downto) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 319;
				expression();
				State = 320;
				Match(Do);
				State = 321;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				Match(For);
				State = 324;
				identifier();
				State = 325;
				Match(In);
				State = 326;
				expression();
				State = 327;
				Match(Do);
				State = 328;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(PascalParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Until() { return GetToken(PascalParser.Until, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(Repeat);
			State = 333;
			statements();
			State = 334;
			Match(Until);
			State = 335;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(PascalParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(PascalParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PascalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PascalParser.COMMA, i);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_withStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(With);
			State = 338;
			variable();
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 339;
				Match(COMMA);
				State = 340;
				variable();
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 346;
			Match(Do);
			State = 347;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(PascalParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterString() { return GetToken(PascalParser.CharacterString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nil() { return GetToken(PascalParser.Nil, 0); }
		public UnsignedConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedConstantContext unsignedConstant() {
		UnsignedConstantContext _localctx = new UnsignedConstantContext(Context, State);
		EnterRule(_localctx, 70, RULE_unsignedConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Number) | (1L << CharacterString) | (1L << Nil))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueTypecastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRC() { return GetToken(PascalParser.LBRC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRC() { return GetToken(PascalParser.RBRC, 0); }
		public ValueTypecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueTypecast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.EnterValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPascalParserListener typedListener = listener as IPascalParserListener;
			if (typedListener != null) typedListener.ExitValueTypecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPascalParserVisitor<TResult> typedVisitor = visitor as IPascalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypecast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueTypecastContext valueTypecast() {
		ValueTypecastContext _localctx = new ValueTypecastContext(Context, State);
		EnterRule(_localctx, 72, RULE_valueTypecast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			identifier();
			State = 352;
			Match(LBRC);
			State = 353;
			expression();
			State = 354;
			Match(RBRC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\x167', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Y', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', ']', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x63', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'n', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 't', '\n', '\n', 
		'\f', '\n', '\xE', '\n', 'w', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x7F', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x82', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x89', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x8C', '\v', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x91', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', '\x96', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\x99', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\x9E', '\n', '\r', '\f', '\r', '\xE', '\r', '\xA1', '\v', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB0', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\xB6', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB9', '\v', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xC1', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC4', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC8', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xCD', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD1', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xD5', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xDB', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xDE', '\v', '\x13', '\x5', 
		'\x13', '\xE0', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xED', '\n', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\xF6', '\n', '\x18', 
		'\f', '\x18', '\xE', '\x18', '\xF9', '\v', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\xFC', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x100', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x108', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x110', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x113', '\v', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x116', 
		'\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x119', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x120', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x123', '\v', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x12B', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x136', '\n', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x14D', '\n', 
		'\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x158', '\n', '$', 
		'\f', '$', '\xE', '$', '\x15B', '\v', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x2', '\x2', '\'', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', '\x2', '\a', '\x3', '\x2', '\x14', '\x18', '\x4', '\x2', '\x3', '\x3', 
		'\x5', '\x5', '\x3', '\x2', '.', '/', '\x3', '\x2', '\x33', '\x34', '\x5', 
		'\x2', '\x3', '\x3', '\x5', '\x5', '&', '&', '\x2', '\x16F', '\x2', 'L', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'O', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'X', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\\', '\x3', '\x2', '\x2', '\x2', '\f', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x64', '\x3', '\x2', '\x2', '\x2', '\x10', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'm', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x16', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', ' ', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xD2', '\x3', '\x2', '\x2', '\x2', '$', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xE3', '\x3', '\x2', '\x2', '\x2', '(', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xEC', '\x3', '\x2', '\x2', '\x2', ',', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x32', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x109', '\x3', '\x2', '\x2', '\x2', '\x36', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x127', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '<', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x135', '\x3', '\x2', '\x2', '\x2', '@', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x46', '\x153', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x15F', '\x3', '\x2', '\x2', '\x2', 'J', '\x161', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\x5', ',', '\x17', '\x2', 'M', 'N', '\a', 
		'\x2', '\x2', '\x3', 'N', '\x3', '\x3', '\x2', '\x2', '\x2', 'O', 'P', 
		'\a', ':', '\x2', '\x2', 'P', '\x5', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'R', '\a', '\x4', '\x2', '\x2', 'R', '\a', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x5', '\x6', '\x4', '\x2', 'T', 'U', '\a', '\n', '\x2', '\x2', 
		'U', 'V', '\x5', '\n', '\x6', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'W', 'Y', '\x5', '\n', '\x6', '\x2', 'X', 'S', '\x3', '\x2', '\x2', '\x2', 
		'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'Z', ']', '\x5', '\f', '\a', '\x2', '[', ']', '\x5', '*', '\x16', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '\v', '\x3', '\x2', '\x2', '\x2', '^', '\x63', '\x5', 
		'\xE', '\b', '\x2', '_', '\x63', '\x5', ' ', '\x11', '\x2', '`', '\x63', 
		'\x5', '&', '\x14', '\x2', '\x61', '\x63', '\x5', '(', '\x15', '\x2', 
		'\x62', '^', '\x3', '\x2', '\x2', '\x2', '\x62', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\r', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x5', '\x12', '\n', '\x2', '\x65', '\x66', '\x5', '\x10', '\t', 
		'\x2', '\x66', 'g', '\x5', '\x14', '\v', '\x2', 'g', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\t', '\x2', '\x2', '\x2', 'i', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\a', '\x11', '\x2', '\x2', 'k', 'n', '\x5', 
		'\x4', '\x3', '\x2', 'l', 'n', '\x5', '\x4', '\x3', '\x2', 'm', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\v', '\x2', '\x2', 'p', 'u', 
		'\x5', '\x14', '\v', '\x2', 'q', 'r', '\a', '\xF', '\x2', '\x2', 'r', 
		't', '\x5', '\x14', '\v', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		't', 'w', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\f', '\x2', '\x2', 
		'y', '\x89', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\r', '\x2', 
		'\x2', '{', '\x80', '\x5', '\x14', '\v', '\x2', '|', '}', '\a', '\xF', 
		'\x2', '\x2', '}', '\x7F', '\x5', '\x14', '\v', '\x2', '~', '|', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\r', '\x2', '\x2', '\x84', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\x12', '\x2', 
		'\x2', '\x86', '\x89', '\x5', '\x4', '\x3', '\x2', '\x87', '\x89', '\a', 
		'\x13', '\x2', '\x2', '\x88', 'o', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x88', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x90', '\x5', 
		'\x16', '\f', '\x2', '\x8E', '\x8F', '\a', '\x19', '\x2', '\x2', '\x8F', 
		'\x91', '\x5', '\x16', '\f', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x97', '\x5', '\x18', '\r', '\x2', '\x93', 
		'\x94', '\a', '\x1C', '\x2', '\x2', '\x94', '\x96', '\x5', '\x18', '\r', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9F', '\x5', 
		'\x1A', '\xE', '\x2', '\x9B', '\x9C', '\a', '\x1F', '\x2', '\x2', '\x9C', 
		'\x9E', '\x5', '\x1A', '\xE', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\a', '\b', '\x2', '\x2', '\xA3', '\xA4', '\x5', 
		'\x14', '\v', '\x2', '\xA4', '\xA5', '\a', '\t', '\x2', '\x2', '\xA5', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xB0', '\x5', '\x12', '\n', 
		'\x2', '\xA7', '\xB0', '\x5', '\"', '\x12', '\x2', '\xA8', '\xB0', '\x5', 
		'H', '%', '\x2', '\xA9', '\xAA', '\a', '*', '\x2', '\x2', '\xAA', '\xB0', 
		'\x5', '\x1A', '\xE', '\x2', '\xAB', '\xAC', '\a', '+', '\x2', '\x2', 
		'\xAC', '\xB0', '\x5', '\x1A', '\xE', '\x2', '\xAD', '\xB0', '\x5', '\x1C', 
		'\xF', '\x2', '\xAE', '\xB0', '\x5', 'J', '&', '\x2', '\xAF', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xB2', '\a', '\v', '\x2', '\x2', '\xB2', '\xB7', 
		'\x5', '\x1E', '\x10', '\x2', '\xB3', '\xB4', '\a', '\xF', '\x2', '\x2', 
		'\xB4', '\xB6', '\x5', '\x1E', '\x10', '\x2', '\xB5', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xBB', '\a', '\f', '\x2', '\x2', '\xBB', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\r', '\x2', '\x2', 
		'\xBD', '\xC2', '\x5', '\x1E', '\x10', '\x2', '\xBE', '\xBF', '\a', '\xF', 
		'\x2', '\x2', '\xBF', '\xC1', '\x5', '\x1E', '\x10', '\x2', '\xC0', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\xE', '\x2', '\x2', 
		'\xC6', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x5', '\x14', '\v', '\x2', 
		'\xCA', '\xCB', '\a', '\x10', '\x2', '\x2', '\xCB', '\xCD', '\x5', '\x14', 
		'\v', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xD0', '\x5', '\x4', '\x3', '\x2', '\xCF', '\xD1', '\x5', '$', 
		'\x13', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '!', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD4', '\x5', '\x4', '\x3', '\x2', '\xD3', '\xD5', '\x5', '$', '\x13', 
		'\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '#', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xDF', '\a', '\b', '\x2', '\x2', '\xD7', '\xDC', '\x5', '\x14', '\v', 
		'\x2', '\xD8', '\xD9', '\a', '\xF', '\x2', '\x2', '\xD9', '\xDB', '\x5', 
		'\x14', '\v', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		'\t', '\x2', '\x2', '\xE2', '%', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', 
		'\a', ')', '\x2', '\x2', '\xE4', '\xE5', '\x5', '\x6', '\x4', '\x2', '\xE5', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', ')', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xED', '\x5', 
		',', '\x17', '\x2', '\xE9', '\xED', '\x5', '\x30', '\x19', '\x2', '\xEA', 
		'\xED', '\x5', '>', ' ', '\x2', '\xEB', '\xED', '\x5', '\x46', '$', '\x2', 
		'\xEC', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '+', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\a', '\'', '\x2', '\x2', '\xEF', '\xF0', '\x5', '.', '\x18', 
		'\x2', '\xF0', '\xF1', '\a', '(', '\x2', '\x2', '\xF1', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF7', '\x5', '\b', '\x5', '\x2', '\xF3', '\xF4', 
		'\a', '\a', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\b', '\x5', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\a', '\a', '\x2', 
		'\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '/', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\x100', '\x5', '\x34', '\x1B', '\x2', '\xFE', '\x100', '\x5', '\x32', 
		'\x1A', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x102', '\a', '\x30', '\x2', '\x2', '\x102', '\x103', '\x5', 
		'\x14', '\v', '\x2', '\x103', '\x104', '\a', '\x31', '\x2', '\x2', '\x104', 
		'\x107', '\x5', '\b', '\x5', '\x2', '\x105', '\x106', '\a', '.', '\x2', 
		'\x2', '\x106', '\x108', '\x5', '\b', '\x5', '\x2', '\x107', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x33', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', ',', 
		'\x2', '\x2', '\x10A', '\x10B', '\x5', '\x14', '\v', '\x2', '\x10B', '\x10C', 
		'\a', '-', '\x2', '\x2', '\x10C', '\x111', '\x5', '\x36', '\x1C', '\x2', 
		'\x10D', '\x10E', '\a', '\a', '\x2', '\x2', '\x10E', '\x110', '\x5', '\x36', 
		'\x1C', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x116', '\x5', '<', '\x1F', '\x2', '\x115', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x117', '\x119', '\a', '\a', '\x2', 
		'\x2', '\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\a', '(', '\x2', '\x2', '\x11B', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x11C', '\x121', '\x5', '\x38', '\x1D', '\x2', '\x11D', 
		'\x11E', '\a', '\xF', '\x2', '\x2', '\x11E', '\x120', '\x5', '\x38', '\x1D', 
		'\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\a', '\n', '\x2', '\x2', '\x125', '\x126', '\x5', '\b', '\x5', 
		'\x2', '\x126', '\x37', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', 
		'\x5', ':', '\x1E', '\x2', '\x128', '\x129', '\a', '\x10', '\x2', '\x2', 
		'\x129', '\x12B', '\x5', ':', '\x1E', '\x2', '\x12A', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\t', '\x3', '\x2', 
		'\x2', '\x12D', ';', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', 
		'\a', '\x2', '\x2', '\x12F', '\x130', '\t', '\x4', '\x2', '\x2', '\x130', 
		'\x131', '\x5', '.', '\x18', '\x2', '\x131', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x136', '\x5', '\x42', '\"', '\x2', '\x133', '\x136', 
		'\x5', '\x44', '#', '\x2', '\x134', '\x136', '\x5', '@', '!', '\x2', '\x135', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x135', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x138', '\a', '\x38', '\x2', '\x2', '\x138', 
		'\x139', '\x5', '\x14', '\v', '\x2', '\x139', '\x13A', '\a', '\x35', '\x2', 
		'\x2', '\x13A', '\x13B', '\x5', '\b', '\x5', '\x2', '\x13B', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x32', '\x2', '\x2', '\x13D', 
		'\x13E', '\x5', '\x4', '\x3', '\x2', '\x13E', '\x13F', '\a', '\x14', '\x2', 
		'\x2', '\x13F', '\x140', '\x5', '\x14', '\v', '\x2', '\x140', '\x141', 
		'\t', '\x5', '\x2', '\x2', '\x141', '\x142', '\x5', '\x14', '\v', '\x2', 
		'\x142', '\x143', '\a', '\x35', '\x2', '\x2', '\x143', '\x144', '\x5', 
		'\b', '\x5', '\x2', '\x144', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\a', '\x32', '\x2', '\x2', '\x146', '\x147', '\x5', '\x4', '\x3', 
		'\x2', '\x147', '\x148', '\a', '\x1A', '\x2', '\x2', '\x148', '\x149', 
		'\x5', '\x14', '\v', '\x2', '\x149', '\x14A', '\a', '\x35', '\x2', '\x2', 
		'\x14A', '\x14B', '\x5', '\b', '\x5', '\x2', '\x14B', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\a', '\x36', '\x2', '\x2', '\x14F', '\x150', 
		'\x5', '.', '\x18', '\x2', '\x150', '\x151', '\a', '\x37', '\x2', '\x2', 
		'\x151', '\x152', '\x5', '\x14', '\v', '\x2', '\x152', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x154', '\a', '\x39', '\x2', '\x2', '\x154', 
		'\x159', '\x5', '\x12', '\n', '\x2', '\x155', '\x156', '\a', '\xF', '\x2', 
		'\x2', '\x156', '\x158', '\x5', '\x12', '\n', '\x2', '\x157', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\a', '\x35', '\x2', 
		'\x2', '\x15D', '\x15E', '\x5', '\b', '\x5', '\x2', '\x15E', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x160', '\t', '\x6', '\x2', '\x2', '\x160', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x5', '\x4', '\x3', 
		'\x2', '\x162', '\x163', '\a', '\b', '\x2', '\x2', '\x163', '\x164', '\x5', 
		'\x14', '\v', '\x2', '\x164', '\x165', '\a', '\t', '\x2', '\x2', '\x165', 
		'K', '\x3', '\x2', '\x2', '\x2', '#', 'X', '\\', '\x62', 'm', 'u', '\x80', 
		'\x88', '\x8A', '\x90', '\x97', '\x9F', '\xAF', '\xB7', '\xC2', '\xC7', 
		'\xCC', '\xD0', '\xD4', '\xDC', '\xDF', '\xEC', '\xF7', '\xFB', '\xFF', 
		'\x107', '\x111', '\x115', '\x118', '\x121', '\x12A', '\x135', '\x14C', 
		'\x159',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
